x-python-service:
  &x-python-service
  depends_on:
    redis:
      condition: service_healthy
    postgres:
      condition: service_started
  networks:
    - internal

x-indexer:
  &x-indexer
  <<: *x-python-service
  build:
    context: .
    dockerfile: config/docker/Dockerfile.indexer
  image: access-indexer
  env_file:
    - ./config/env/.core.env
    - ./config/env/.indexer.env
  restart: on-failure


services:
  transaction-lookup:
    build:
      context: ./backend/transaction-lookup
      dockerfile: ./config/Dockerfile.worker
    env_file:
      - ./config/env/.transaction-lookup.env
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - internal

  indexer-blockchain:
    <<: *x-indexer
    command: [
      "celery",
      "-A",
      "indexer.celery_app:app",
      "worker",
      "--pool=gevent",
      "-Q",
      "wallet-fetch-queue",
      "--loglevel=info"
    ]
    environment:
      - WORKER_CONCURRENCY=4
    volumes:
      - ./backend/core:/app/core
      - ./backend/indexer:/app/indexer

  indexer-stickers:
    <<: *x-indexer
    command: [
      "celery",
      "-A",
      "indexer.celery_app:app",
      "worker",
      "--pool=gevent",
      "-Q",
      "sticker-fetch-queue",
      "--loglevel=info"
    ]
    environment:
      - WORKER_CONCURRENCY=1
    volumes:
      - ./backend/core:/app/core
      - ./backend/indexer:/app/indexer
      - ./config/certs/private_key.pem:/tmp/private_key.pem

  indexer-gifts:
    <<: *x-indexer
    command: [
      "celery",
      "-A",
      "indexer.celery_app:app",
      "worker",
      "--pool=gevent",
      "-Q",
      "gift-fetch-queue",
      "--loglevel=info"
    ]
    environment:
      - WORKER_CONCURRENCY=1
    volumes:
      - ./backend/core:/app/core
      - ./backend/indexer:/app/indexer
      - ./config/env/sessions:/tmp:rw

  load-noticed-wallets:
    <<: *x-python-service
    image: access-indexer
    env_file:
      - ./config/env/.core.env
      - ./config/env/.indexer.env
    restart: on-failure
    command: [
      "celery",
      "-A",
      "indexer.celery_app:app",
      "worker",
      "--pool=gevent",
      "-Q",
      "noticed-wallets-upload-queue",
      "--loglevel=info"
    ]
    environment:
      - WORKER_CONCURRENCY=1
      - LOAD_WALLETS=1
    volumes:
      - ./backend/core:/app/core
      - ./backend/indexer:/app/indexer

  community-manager-tasks:
    <<: *x-python-service
    build:
      context: .
      dockerfile: ./config/docker/Dockerfile.community-manager
    image: access-community-manager
    env_file:
      - ./config/env/.core.env
      - ./config/env/.community-manager.env
    command: [
      "celery",
      "-A",
      "community_manager.celery_app:app",
      "worker",
      "--pool=gevent",
      "-Q",
      "system-queue",
      "--loglevel=info"
    ]
    volumes:
      - ./backend/community_manager:/app/community_manager
      - ./backend/core:/app/core
      - community-manager-tasks-session:/app/data

  community-manager:
    <<: *x-python-service
    image: access-community-manager
    env_file:
      - ./config/env/.core.env
      - ./config/env/.community-manager.env
    command: ["python3", "community_manager/entrypoint.py"]
    ports:
      - "8081:8080"
    volumes:
      - ./backend/community_manager:/app/community_manager
      - ./backend/core:/app/core
      - community-manager-session:/app/data

  scheduler:
    <<: *x-python-service
    build:
      context: .
      dockerfile: ./config/docker/Dockerfile.scheduler
    image: access-scheduler
    env_file:
      - ./config/env/.core.env
      - ./config/env/.community-manager.env
      - ./config/env/.indexer.env
    command: [
      "celery",
      "-A",
      "scheduler.celery_app:app",
      "beat",
      "--loglevel=info"
    ]
    volumes:
      - ./backend/scheduler:/app/scheduler
      - ./backend/community_manager:/app/community_manager
      - ./backend/core:/app/core

  api:
    <<: *x-python-service
    build:
      context: .
      dockerfile: ./config/docker/Dockerfile.api
    image: access-api
    env_file:
      - ./config/env/.api.env
      - ./config/env/.core.env
      - ./config/env/.indexer.env
    container_name: "access-api"
    ports:
      - "8000:8000"
    command: [
      "gunicorn",
      "api.app:app",
      "-k", "uvicorn_worker.UvicornWorker",
      "--bind", "0.0.0.0:8000",
      "--workers", "4",
      "--access-logfile", "-",
    ]

  redis:
    image: "redis:7.2.4-alpine"
    ports:
      - "6380:6379"
    volumes:
      - volume-queue:/data
    container_name: "access-redis"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 5
    networks:
      - internal

  postgres:
    image: "postgres:17.5"
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=${SQL_USER}
      - POSTGRES_PASSWORD=${SQL_PASSWORD}
      - POSTGRES_DB=${SQL_DATABASE}
    volumes:
      - volume-data-postgres:/var/lib/postgresql/data/
    container_name: "access-postgres"
    networks:
      - internal

  frontend:
    image: "access-frontend"
    pull_policy: never
    build:
      context: .
      dockerfile: ./config/docker/Dockerfile.frontend
    container_name: "access-frontend"
    volumes:
      - ./frontend/.env:/app/.env
    networks:
      - internal


volumes:
  volume-data-postgres:
  volume-queue:
  community-manager-session:
  community-manager-tasks-session:


networks:
  internal:
